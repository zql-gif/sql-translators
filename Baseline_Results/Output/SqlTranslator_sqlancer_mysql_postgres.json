[
    {
        "date": "15/06/2019",
        "dbms": "Postgres",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95820"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0 (\n  c0 INT UNIQUE,\n  c1 INT,\n  c2 INT UNIQUE\n)\nENGINE=MyISAM;\n",
            "INSERT INTO t0 (\n  c0\n)\nVALUES\n  (DEFAULT),\n  ('');\n",
            "INSERT IGNORE INTO t0 (\n  c2\n)\nVALUES\n  ('a');\n",
            "RREPLACE INTO t0(c1, c0, c2) VALUES(1, DEFAULT, DEFAULT), (DEFAULT, \"a\", \"a\");\n",
            "Error while parsing\nInvalid expression / Unexpected token. Line 1, Col: 15. REPAIR TABLE \u001B[4mt0\u001B[0m QUICK EXTENDED USE_FRM;",
            "SELECT\n  *\nFROM t0;\n"
        ],
        "title": "REPAIR TABLE on a functional table marks it as crashed",
        "sqls": "CREATE TABLE t0(c0 INT UNIQUE, c1 INT, c2 INT UNIQUE) ENGINE = MyISAM;\nINSERT INTO t0(c0) VALUES(DEFAULT), (\\\"\\\");\nINSERT IGNORE INTO t0(c2) VALUES(\\\"a\\\");\nREPLACE INTO t0(c1, c0, c2) VALUES(1, DEFAULT, DEFAULT), (DEFAULT, \\\"a\\\", \\\"a\\\");\nREPAIR TABLE t0 QUICK EXTENDED USE_FRM;\nSELECT * FROM t0;"
    },
    {
        "date": "18/06/2019",
        "dbms": "Postgres",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95856"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0 (\n  c0 INT UNIQUE,\n  c1 INT,\n  c2 INT,\n  c3 INT UNIQUE\n)\nENGINE=MyISAM;\n",
            "INSERT INTO t0 (\n  c0\n)\nVALUES\n  (DEFAULT),\n  ('a');\n",
            "INSERT IGNORE INTO t0 (\n  c3\n)\nVALUES\n  ('a'),\n  (1);\n",
            "REPLACE INTO t0(c1, c0, c3) VALUES(1, 2, 3), (1, \"a\", \"a\");\n",
            "SELECT\n  (\n    NULL\n  ) IN (\n    SELECT\n      t0.c3\n    FROM t0\n    WHERE\n      t0.c0\n  );\n"
        ],
        "title": "\"Can't find record\" error in SELECT statement 1 (MyISAM engine)",
        "sqls" : "CREATE TABLE t0(c0 INT UNIQUE, c1 INT, c2 INT, c3 INT UNIQUE) ENGINE = MyISAM;\nINSERT INTO t0(c0) VALUES(DEFAULT), (\\\"a\\\");\nINSERT IGNORE INTO t0(c3) VALUES(\\\"a\\\"), (1);\nREPLACE INTO t0(c1, c0, c3) VALUES(1, 2, 3), (1, \\\"a\\\", \\\"a\\\");\nSELECT (NULL) IN (SELECT t0.c3 FROM t0 WHERE t0.c0);"
    },
    {
        "date": "18/06/2019",
        "dbms": "Postgres",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95866"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0 (\n  c0 INT UNIQUE\n)\nENGINE=HEAP;\n",
            "INSERT INTO t0 (\n  c0\n)\nVALUES\n  (DEFAULT),\n  ('a'),\n  ('a');\n",
            "SELECT\n  (\n    NULL\n  ) IN (\n    SELECT\n      t0.c0\n    FROM t0\n    WHERE\n      (\n        (\n          t0.c0\n        ) OR TRUE\n      ) IS NULL\n  );\n"
        ],
        "title": "\"Can't find record\" error in SELECT statement 2 (HEAP engine)",
        "sqls": "CREATE TABLE t0(c0 INT UNIQUE) ENGINE = HEAP;\nINSERT INTO t0(c0) VALUES (DEFAULT), (\\\"a\\\"), (\\\"a\\\");\nSELECT (NULL) IN (SELECT t0.c0 FROM t0 WHERE ((t0.c0) OR TRUE) IS NULL);"
    },
    {
        "date": "01/04/2020",
        "dbms": "Postgres",
        "links": {
            "bugreport": "https://bugs.mysql.com/bug.php?id=99150"
        },
        "oracle": "TLP (WHERE Extended)",
        "reporter": "Manuel Rigger",
        "status": "closed (not a bug)",
        "test": [
            "CREATE TABLE t0 (\n  c0 REAL UNIQUE\n);",
            "INSERT INTO t0 (\n  c0\n)\nVALUES\n  (296088496),\n  (0),\n  (2080822651);",
            "SELECT\n  *\nFROM t0\nWHERE\n  NOT t0.c0 IN (622120376, -1.421821436E9, 296088496);\n"
        ],
        "title": "The IN operator malfunctions for floating-poing numbers",
        "sqls": "CREATE TABLE t0(c0 FLOAT UNIQUE);\n\nINSERT INTO t0(c0) VALUES (296088496), (0), (2080822651);\n        \nSELECT * FROM t0 WHERE t0.c0 NOT IN (622120376, -1.421821436E9, 296088496);"
    },
    {
        "date": "04/04/2020",
        "dbms": "Postgres",
        "links": {
            "bugreport": "https://bugs.mysql.com/bug.php?id=99182"
        },
        "oracle": "TLP (WHERE Extended)",
        "reporter": "Manuel Rigger",
        "status": "closed (not a bug)",
        "test": [
            "CREATE TABLE t0 (\n  c0 DECIMAL UNIQUE\n);",
            "INSERT INTO t0 (\n  c0\n)\nVALUES\n  (0);",
            "SELECT\n  *\nFROM t0\nWHERE\n  '' BETWEEN t0.c0 AND t0.c0;\n"
        ],
        "title": "BETWEEN computes incorrect result when comparing DECIMAL with a string",
        "sqls": "CREATE TABLE t0(c0 DECIMAL UNIQUE);\n\nINSERT INTO t0(c0) VALUES(0);\n\nSELECT * FROM t0 WHERE '' BETWEEN t0.c0 AND t0.c0;"
    },
    {
        "comment": "We found this bug on the latest public version of MySQL. The bug report was closed, since the bug had already been fixed internally.",
        "date": "20/06/2019",
        "dbms": "Postgres",
        "fix_version": "8.0.17",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95900"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "closed (duplicate)",
        "test": [
            "CREATE TABLE t0 (\n  c0 INT\n);",
            "INSERT INTO t0 (\n  c0\n)\nVALUES\n  (1);",
            "SELECT\n  *\nFROM t0\nWHERE\n  123 <> (\n    NOT (\n      NOT 123\n    )\n  );"
        ],
        "title": "Applying NOT twice on an integer results in wrong result in WHERE condition",
        "sqls": "CREATE TABLE t0(c0 INT);\n        \nINSERT INTO t0(c0) VALUES(1);\n            \nSELECT * FROM t0 WHERE 123 != (NOT (NOT 123));"
    },
    {
        "date": "21/06/2019",
        "dbms": "Postgres",
        "fix_version": "8.0.17",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95908"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0 (\n  c0 SMALLINT\n);",
            "INSERT INTO t0 (\n  c0\n)\nVALUES\n  (NULL);",
            "SELECT\n  *\nFROM t0\nWHERE\n  NOT (\n    t0.c0 IS NOT DISTINCT FROM 2035382037\n  );"
        ],
        "title": "The negation of a \"<=>\" comparison malfunctions depending on the column's type",
        "sqls": "CREATE TABLE t0(c0 TINYINT);\nINSERT INTO t0(c0) VALUES(NULL);\nSELECT * FROM t0 WHERE NOT(t0.c0 <=> 2035382037);"
    },
    {
        "comment": "The bug was fixed in 8.0.17, but not necessarily based on our bug report, since it was not referenced.",
        "date": "22/06/2019",
        "dbms": "Postgres",
        "fix_version": "8.0.17",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95926"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0 (\n  c0 INT\n);",
            "INSERT INTO t0 (\n  c0\n)\nVALUES\n  (1);",
            "SELECT\n  *\nFROM t0\nWHERE\n  CASE WHEN FALSE THEN t0.c0 ELSE 0.1 END;\n"
        ],
        "title": "Row is not fetched when using a function expression that should yield TRUE",
        "sqls": "CREATE TABLE t0(c0 INT);\nINSERT INTO t0(c0) VALUES(1);\nSELECT * FROM t0 WHERE IF(FALSE, t0.c0, 0.1);"
    },
    {
        "date": "22/06/2019",
        "dbms": "Postgres",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95927"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SELECT\n  (FALSE AND (NOT '0.5')) OR ((NOT FALSE) AND '0.5');\n"
        ],
        "title": "XOR operator returns incorrect result for strings with a floating-point number",
        "sqls": "SELECT FALSE XOR '0.5';"
    },
    {
        "date": "22/06/2019",
        "dbms": "Postgres",
        "fix_version": "8.0.20",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95929"
        },
        "oracle": "error",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0 (\n  c0 INT\n)\nENGINE=MyISAM;",
            "SELECT\n  *\nFROM information_schema.TABLES;"
        ],
        "title": "Duplicate entry for key 'PRIMARY' when querying information_schema.TABLES",
        "sqls": "CREATE TABLE t0(c0 INT) ENGINE = MyISAM;\nselect * from information_schema.TABLES;"
    },
    {
        "date": "24/06/2019",
        "dbms": "Postgres",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95937"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "fixed (in documentation)",
        "test": [
            "SELECT\n  BENCHMARK(NULL, 1);\n",
            "SELECT\n  BENCHMARK(-1, 1);"
        ],
        "title": "BENCHMARK() returns NULL in some cases but is documented to always return 0",
        "sqls": "SELECT BENCHMARK(NULL, 1); \nSELECT BENCHMARK(-1, 1);"
    },
    {
        "date": "24/06/2019",
        "dbms": "Postgres",
        "fix_version": "8.0.17",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95938"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0 (\n  c0 TEXT\n);\n",
            "INSERT IGNORE INTO t0 (\n  c0\n)\nVALUES\n  ('\n123');\n",
            "SELECT\n  *\nFROM t0\nWHERE\n  COALESCE(t0.c0);\n",
            "SELECT\n  *\nFROM t0\nWHERE\n  COALESCE(t0.c0, 1);\n"
        ],
        "title": "Function return value with newline yields wrong result when used as a boolean",
        "sqls": "CREATE TABLE t0(c0 TEXT);\nINSERT IGNORE INTO t0(c0) VALUES(\\\"\\\\n123\\\");\nSELECT * FROM t0 WHERE COALESCE(t0.c0);\nSELECT * FROM t0 WHERE IFNULL(t0.c0, 1);"
    },
    {
        "date": "24/06/2019",
        "dbms": "Postgres",
        "fix_version": "8.0.17",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95942"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0 (\n  c0 TEXT\n);",
            "INSERT INTO t0 (\n  c0\n)\nVALUES\n  (0.9);",
            "SELECT\n  *\nFROM t0\nWHERE\n  t0.c0;\n"
        ],
        "title": "TEXT column used as boolean incorrectly evaluates to false",
        "sqls": "CREATE TABLE t0(c0 TEXT);\nINSERT INTO t0(c0) VALUES(0.9);\nSELECT * FROM t0 WHERE t0.c0;"
    },
    {
        "date": "24/06/2019",
        "dbms": "Postgres",
        "fix_version": "8.0.18",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95954"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0 (\n  c0 UBIGINT\n);",
            "INSERT INTO t0 (\n  c0\n)\nVALUES\n  (NULL);",
            "SELECT\n  *\nFROM t0\nWHERE\n  CAST(COALESCE(t0.c0, -1) AS UBIGINT);",
            "SELECT\n  *\nFROM t0\nWHERE\n  CAST(COALESCE(t0.c0, -1) AS UBIGINT);"
        ],
        "title": "CAST of negative function return value to UNSIGNED malfunctions with BIGINT",
        "sqls": "CREATE TABLE t0(c0 BIGINT UNSIGNED);\nINSERT INTO t0(c0) VALUES(NULL);\nSELECT * FROM t0 WHERE CAST(COALESCE(t0.c0, -1) AS UNSIGNED);\nSELECT * FROM t0 WHERE CAST(IFNULL(t0.c0, -1) AS UNSIGNED);"
    },
    {
        "date": "24/06/2019",
        "dbms": "Postgres",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95957"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0 (\n  c0 INT\n);",
            "INSERT INTO t0 (\n  c0\n)\nVALUES\n  (-1);",
            "SELECT\n  t0.c0 IN (1, CAST(t0.c0 AS UBIGINT))\nFROM t0;"
        ],
        "title": "IN operator issue when comparing signed column and the column cast to unsigned",
        "sqls": "CREATE TABLE t0(c0 INT);\nINSERT INTO t0(c0) VALUES(-1);\nSELECT t0.c0 IN (1, CAST(t0.c0 AS UNSIGNED)) from t0;"
    },
    {
        "date": "24/06/2019",
        "dbms": "Postgres",
        "fix_version": "8.0.17",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95958"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0 (\n  c0 TEXT\n);",
            "INSERT INTO t0 (\n  c0\n)\nVALUES\n  ('0.5');",
            "SELECT\n  *\nFROM t0\nWHERE\n  t0.c0 AND 1;",
            "SELECT\n  *\nFROM t0\nWHERE\n  t0.c0 OR 0;",
            "SELECT\n  *\nFROM t0\nWHERE\n  (t0.c0 AND (NOT 0)) OR ((NOT t0.c0) AND 0);\n"
        ],
        "title": "AND/OR/XOR compute wrong result for small floating-point numbers in TEXT columns",
        "sqls": "CREATE TABLE t0(c0 TEXT);\nINSERT INTO t0(c0) VALUES(\\\"0.5\\\");\nSELECT * FROM t0 WHERE t0.c0 AND 1;\nSELECT * FROM t0 WHERE t0.c0 OR 0;\nSELECT * FROM t0 WHERE t0.c0 XOR 0;"
    },
    {
        "date": "24/06/2019",
        "dbms": "Postgres",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95960"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "SELECT\n  '\n1' & 1;",
            "SELECT\n  '\n1' | 0;",
            "SELECT\n  '\n1' # 1;"
        ],
        "title": "The logical operators &, |, and ^ do not ignore newlines in TEXT",
        "sqls": "SELECT '\\n1' & 1;\nSELECT '\\n1' | 0;\nSELECT '\\n1' ^ 1;"
    },
    {
        "date": "25/06/2019",
        "dbms": "Postgres",
        "links": {
            "bugtracker": "https://bugs.mysql.com/bug.php?id=95964"
        },
        "oracle": "PQS",
        "reporter": "Manuel Rigger",
        "status": "fixed",
        "test": [
            "CREATE TABLE t0 (\n  c0 INT\n);",
            "CREATE TABLE t1 (\n  c0 INT\n)\nENGINE=MEMORY;",
            "INSERT INTO t0 (\n  c0\n)\nVALUES\n  (0);",
            "INSERT INTO t1 (\n  c0\n)\nVALUES\n  (-1);",
            "SELECT\n  *\nFROM t0, t1\nWHERE\n  (\n    CAST(t1.c0 AS UBIGINT)\n  ) > (\n    COALESCE('u', t0.c0)\n  );"
        ],
        "title": "Compare that uses UNSIGNED cast and function malfunctions in the MEMORY engine",
        "sqls": "CREATE TABLE t0(c0 INT);\nCREATE TABLE t1(c0 INT) ENGINE = MEMORY;\nINSERT INTO t0(c0) VALUES(0);\nINSERT INTO t1(c0) VALUES(-1);\nSELECT * FROM t0, t1 WHERE (CAST(t1.c0 AS UNSIGNED)) > (IFNULL(\"u\", t0.c0));"
    },
    {
        "date": "01/04/2020",
        "dbms": "Postgres",
        "links": {
            "bugreport": "https://bugs.mysql.com/bug.php?id=99146"
        },
        "oracle": "TLP (WHERE Extended)",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0 (\n  c0 REAL UNIQUE\n);",
            "INSERT INTO t0 (\n  c0\n)\nVALUES\n  (0);",
            "SELECT\n  *\nFROM t0\nWHERE\n  t0.c0 BETWEEN 0 AND '1e500';"
        ],
        "title": "Comparison on FLOAT column and large value malfunctions",
        "sqls": "CREATE TABLE t0(c0 FLOAT UNIQUE);\nINSERT INTO t0(c0) VALUES (0);\nSELECT * FROM t0 WHERE t0.c0 BETWEEN 0 AND '1e500';"
    },
    {
        "date": "01/04/2020",
        "dbms": "Postgres",
        "links": {
            "bugreport": "https://bugs.mysql.com/bug.php?id=99149"
        },
        "oracle": "TLP (WHERE Extended)",
        "reporter": "Manuel Rigger",
        "status": "verified",
        "test": [
            "CREATE TABLE t0 (\n  c0 TEXT\n);",
            "INSERT INTO t0 (\n  c0\n)\nVALUES\n  (0);",
            "CREATE INDEX i0 ON t0(C0(1) NULLS FIRST);",
            "SELECT\n  *\nFROM t0\nWHERE\n  NOT t0.c0 BETWEEN '\\u05a3a' AND NULL;\n"
        ],
        "title": "BETWEEN query malfunctions for special character and TEXT index",
        "sqls": "CREATE TABLE t0(c0 TEXT);\nINSERT INTO t0(c0) VALUES(0);\nCREATE INDEX i0 ON t0(c0(1));\nSELECT * FROM t0 WHERE t0.c0 NOT BETWEEN '\\u05a3a' AND NULL;\n"
    }
]